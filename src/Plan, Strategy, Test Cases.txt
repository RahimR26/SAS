
    PROC CODEIT Test Plan.

1	Introduction
    1.1 	The current Do statement allows a group of statements to be executed between DO and END repetitively based on the index variable.
    The new version must have the ability to optionally increment the output by a user specified value.

2	Objectives and Tasks
    2.1	Objectives:
        2.1.1	To deliver a working Statements

3	Scope
    3.1 	The application should be tested with the new increment functionality with options of both using the increment or not using it.
    3.2 	Manual and automated test completion, review, comments +results

4	Assumptions/ Risks
    4.1	Assumption
        4.1.1	Passing a value of 0 or null into increment will result in normal execution and a standard increment of 1
        4.1.2	Start and stop can only be positive values
        4.1.3	If statement list has no values, it will automatically give an empty/error message
        4.1.4	Increment can be either positive or negative.
        4.1.5   If increment value is larger than the list size this will only give us the start value by itself.
    4.2	Risks
        4.2.1	RISK: Changes to the functionality may negate the tests already in place and we may lose test cases already written.
        4.2.2	Impact: High
        4.2.3	Trigger: Loss of all test cases
        4.2.4	Mitigation plan: Export data prior to any upgrade, slowly implement, and re-import after upgrade
5	Test Approach
    5.1 	Do exploratory testing and manual testing first to polish up the understanding about the functionality.
    5.2 	Automate the tests using random values?






    TEST CASES
    Test case 1:
        •	Case ID: 1
        •	Case Description: Check increment functionality with correct and positive(+) value
        •	Test steps:
            o   Determine statement list size
            o	Insert start and stop values
            o	Insert increment value
        •	Test data:
            o   List size of 10
            o	Start = 1
            o	Stop = 10
            o	Increment = 2
        •	Expected Results:
            o	The statements in indexes 1, 3, 5, 7, and 9 should be executed.
        •	Actual Result:
            o	TBD
        •	Pass/Fail
            o	TBD

    Test case 2:
        •	Case ID: 2
        •	Case Description: Check increment functionality with correct and negative(+) value
        •	Test steps:
            o   Determine statement list size
            o	Insert start and stop values
            o	Insert *negative* increment value
        •	Test data:
            o   List size of 10
            o	Start = 1    //The start and stop values are swapped if increment is a negative value
            o	Stop = 10  // According to CAS Procedure Programming Guide and Reference
            o	Increment = -2
        •	Expected Results:
            o	The statements in indexes 10,8,6,4, and 2 should be executed.
        •	Actual Result:
            o	TBD
        •	Pass/Fail
            o	TBD

    Test case 3:
            •	Case ID: 3
            •	Case Description: Check increment functionality with incorrect value
            •	Test steps:
                o   Determine statement list size
                o	Insert start and stop values
                o	Insert incorrect increment value that is greater than 10
            •	Test data:
                o   List size of 10
                o	Start = 1    //The start and stop values are swapped if increment is a negative value
                o	Stop = 10  // According to CAS Procedure Programming Guide and Reference
                o	Increment = 11
            •	Expected Results:
                o	We should only get 1 value which will be the start value
            •	Actual Result:
                o	TBD
            •	Pass/Fail
                o	TBD



    PseudoCode for Case 3:

    initialize start;
    initialize stop;
    initialize increment;

    initialize statementSize to list.size();

    if increment > statementSize
       then return value of list at start index
       Assert(to make sure actual and expected(list[start]) match)
       Print message saying that increment is larger than list size
       END

    else
        DO index = start TO stop <BY increment>;
            <statement-list>
            END;

**********************
    Current:
    DO index = start TO stop;
     <statement-list>
    END;

    New:
    DO index = start TO stop <BY increment>;
    <statement-list>
    END;


    Example of how the code works:
    DO i=1 TO 10 by 3;
    Statements list
    END;
**********************






}
